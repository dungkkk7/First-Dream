#pragma warning(disable : 4996) // Disable specific deprecation warnings
#define _WINSOCK_DEPRECATED_NO_WARNINGS // Disable inet_addr deprecation warnings

#include <winsock2.h>
#include <ws2tcpip.h> // Add this for inet_pton support
#include <string>
#include <fstream>
#include <stdexcept>

#pragma comment(lib, "ws2_32.lib") // Necessary for Winsock library linking

class Communication {
private:
    SOCKET clientSocket;

public:
    Communication(const std::string& ip, int port) {
        // Initialize Winsock
        WSADATA wsaData;
        if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
            throw std::runtime_error("WSAStartup failed");
        }

        // Create socket
        clientSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
        if (clientSocket == INVALID_SOCKET) {
            WSACleanup();
            throw std::runtime_error("Socket creation failed");
        }

        // Prepare server address structure
        sockaddr_in serverAddr = {};
        serverAddr.sin_family = AF_INET;
        serverAddr.sin_port = htons(port);

        // Use inet_pton for more modern IP address conversion
        if (inet_pton(AF_INET, ip.c_str(), &(serverAddr.sin_addr)) <= 0) {
            closesocket(clientSocket);
            WSACleanup();
            throw std::runtime_error("Invalid IP address");
        }

        // Connect to server
        if (connect(clientSocket, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) == SOCKET_ERROR) {
            closesocket(clientSocket);
            WSACleanup();
            throw std::runtime_error("Connection failed");
        }
    }

    bool connectToServer() const {
        return clientSocket != INVALID_SOCKET;
    }

    std::string receiveCommand() {
        char buffer[256] = { 0 };
        int bytesReceived = recv(clientSocket, buffer, sizeof(buffer) - 1, 0);

        if (bytesReceived > 0) {
            return std::string(buffer);
        }

        if (bytesReceived == SOCKET_ERROR) {
            throw std::runtime_error("Receive failed");
        }

        return "";
    }

    void sendFile(const std::string& filename) {
        std::ifstream file(filename, std::ios::binary);
        if (!file) {
            throw std::runtime_error("Cannot open file: " + filename);
        }

        char buffer[1024];
        while (file.read(buffer, sizeof(buffer))) {
            int bytesSent = send(clientSocket, buffer, file.gcount(), 0);
            if (bytesSent == SOCKET_ERROR) {
                throw std::runtime_error("Send failed");
            }
        }

        // Send any remaining bytes
        if (file.gcount() > 0) {
            int bytesSent = send(clientSocket, buffer, file.gcount(), 0);
            if (bytesSent == SOCKET_ERROR) {
                throw std::runtime_error("Send failed");
            }
        }

        file.close();
    }

    ~Communication() {
        if (clientSocket != INVALID_SOCKET) {
            closesocket(clientSocket);
        }
        WSACleanup();
    }

    // Prevent copying
    Communication(const Communication&) = delete;
    Communication& operator=(const Communication&) = delete;
};